-- Enable Quore

-- Sets the Delimiter to $$ from ; to allow the procedure to be added all at once
DELIMITER $$

-- Sets the database to the Production database
USE `{{ mysql_db }}`$$

-- Drops procedure if exists and creates a new one with parameters and parameter types
DROP PROCEDURE IF EXISTS `enableQuore`$$
CREATE PROCEDURE `enableQuore`(companyID INT, quoreTokenId VARCHAR(64))
-- Comment describing the function of the procedure and the meaning of the parameters

COMMENT 'configuring the Quore integration

Parameters:
- companyID - The property where we are configuring the Quore integration
- quoreTokenId - Quore token ID generated by sending a post request using the quore token'

proc:BEGIN
    -- Exit procedure if not on PrimaryDB
    IF (isPrimaryDB() != 1) THEN
        SET @errorMessage = 'Not using Primary DB! Switch to Primary DB to run this procedure.';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT=@errorMessage; 
    END IF;

    -- Define variables for logging the procedure
    SET @procedureName := 'enableQuore';
    SET @tablesAffected := 'external_system_company, external_property_id';
    SET @variablesProvided := CONCAT('company_id: ', companyID, 'quore_token_id: ', quoreTokenId);
    SET @results := '';
    SET @rowsAffected := 0;

    -- Define variables for procedure
    SET @externalSystemId := (SELECT `external_system_id` FROM `external_system` WHERE `label` = 'Quore');
    SET @externalPropertyIdTypeId := (
            SELECT `external_property_id_type_id` 
            FROM `external_property_id_type` 
            WHERE `external_system_id` = @externalSystemId 
            AND `type` = 'quore_token_id'
        );

    -- Validate the defined variables
    IF (@externalSystemId IS NULL OR @externalSystemId = '') THEN
        SET @errorMessage = 'External_system_id for Quore does not exist. Please contact an engineer';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= @errorMessage;
    END IF;

    IF (@externalPropertyIdTypeId IS NULL OR @externalPropertyIdTypeId = '') THEN
        SET @errorMessage = 'External_property_id_type_id for quore_token_id does not exist. Please contact an engineer';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= @errorMessage;
    END IF;


    -- Validate parameters given

    -- Check companyID to ensure it isn't empty
    IF (companyID = '') THEN 
        SET @errorMessage = 'Please provide a valid company_id';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT=@errorMessage; 
    END IF; 

    -- Check quoreTokenId to ensure it isn't empty
    IF (REPLACE(quoreTokenId, ' ', '') = '') THEN 
        SET @errorMessage = 'Please provide a valid quore_token_id';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT=@errorMessage; 
    END IF; 

    -- Validate the provided companyID exists, exit procedure if needed
    IF NOT EXISTS(SELECT 1 FROM `company` WHERE `company_id` = companyID) THEN
        SET @errorMessage = CONCAT('company_id "', companyID, '" not found! Please provide a valid company_id');
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT=@errorMessage; 
    END IF; 

    -- Validate the provided quoreTokenId does not exist, exit procedure if needed
    IF EXISTS(SELECT 1 FROM `external_property_id` WHERE `external_id` = quoreTokenId) THEN
        SET @errorMessage = CONCAT('quore_token_id "', quoreTokenId, 
                '" already exists! Please provide a valid quore_token_id');
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT=@errorMessage; 
    END IF; 

    -- Update database
    INSERT IGNORE INTO `external_system_company` (`external_system_id`, `company_id`)
        VALUES (@externalSystemId, companyID);
        SET @rowsAffected := @rowsAffected + ROW_COUNT();

	INSERT INTO `external_property_id` (`property_id`, `external_id`, `external_property_id_type_id`)
		VALUES (companyID, quoreTokenId, @externalPropertyIdTypeId);
   	    SET @rowsAffected := @rowsAffected + ROW_COUNT();
   	
   	-- Log all the details related to this procedure being ran
    CALL `logSupportProcedureWithResults`(@procedureName, @tablesAffected, @variablesProvided, @rowsAffected, @results);

END;$$

DELIMITER ; 
